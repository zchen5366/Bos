<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa" xmlns:task="http://www.springframework.org/schema/task"
	xmlns:jaxws="http://cxf.apache.org/jaxws"	xmlns:soap="http://cxf.apache.org/bindings/soap"
	xsi:schemaLocation="
						http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
						http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
						http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
						http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
						http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
						http://www.springframework.org/schema/data/jpa
						http://www.springframework.org/schema/data/jpa/spring-jpa.xsd
						http://cxf.apache.org/bindings/soap
						http://cxf.apache.org/schemas/configuration/soap.xsd
						http://cxf.apache.org/jaxws
						http://cxf.apache.org/schemas/jaxws.xsd">

	<!--
		#########################################################
		指定连接池配置
		#########################################################
	-->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="oracle.jdbc.driver.OracleDriver" />
		<property name="jdbcUrl" value="jdbc:oracle:thin:@192.168.171.128:1521:ORCL" />
		<property name="user" value="heima17" />
		<property name="password" value="123" />
	</bean>
	<!-- spring整合JPA -->
	<bean id="entityManagerFactory"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!--
			#########################################################
			指定要扫描的实体类所在的包
			#########################################################
		-->
		<property name="packagesToScan" value="com.chenzhou.bos.bean" />
		<!-- 指定持久层提供者为Hibernate -->
		<property name="persistenceProvider">
			<bean class="org.hibernate.ejb.HibernatePersistence" />
		</property>
		<property name="jpaVendorAdapter">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
				<!-- 自动建表 -->
				<property name="generateDdl" value="true" />
				<property name="database" value="ORACLE" />
				<property name="databasePlatform" value="org.hibernate.dialect.Oracle10gDialect" />
				<property name="showSql" value="true"/>
			</bean>
		</property>
		<property name="jpaDialect">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaDialect" />
		</property>
	</bean>

	<!-- 配置事务管理器 -->
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
	</bean>

	<!--
		#########################################################
		指定Spring进行扫描的包，如果该包中的类使用了@Component @Controller@Service等注解，会把这些类注册为bean
		不要扫描DAO ！！！！DAO包下的类要使用Spring Data JPA框架进行扫描
		#########################################################
	-->
	<context:component-scan base-package="com.chenzhou.bos.service,com.chenzhou.bos.web" />

	<!-- 配置注解事务 -->
	<tx:annotation-driven proxy-target-class="true" transaction-manager="transactionManager" />
	<!--
		#########################################################
		指定Spring Data JPA要进行扫描的包,该包中的类框架会自动为其创建代理
		#########################################################
	-->
	<jpa:repositories base-package="com.chenzhou.bos.dao" />
	
	<!-- 注册crm客户端代理对象，用于通过webservice访问crm服务 -->
	<jaxws:client id="crmService" address="http://localhost:8180/crm/webservice/customer" serviceClass="com.chenzhou.crm.service.impl.CustomerService">
	</jaxws:client>
	
	<!--注册订单服务 -->
	<jaxws:server id="orderService" address="/order">
		<jaxws:serviceBean>
			<ref bean="orderServiceImpl" />
		</jaxws:serviceBean>
	</jaxws:server>
	
	
	<!-- 注册shiro框架的过滤器
	id一定要和web.xml中声明的DelegatingFilterProxy过滤器名字一致
-->
	<bean id="shirofilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<!-- 注入shiro框架核心对象,安全管理器 -->
		<property name="securityManager" ref="securityManager" />
		<!-- 指定要验证的页面 -->
		<property name="loginUrl" value="/login.html" />
		<!-- 指定权限验证成功后,跳转页面 -->
		<property name="successUrl" value="/index.html" />
		<!-- 指定权限不足页面 -->
		<property name="unauthorizedUrl" value="/login.html" />
		<!-- 指定URL拦截规则 -->
		<!--
			authc:代表shiro框架提供的一个过滤器，这个过滤器用于判断当前用户是否已经完成认证,
			如果当前用户已经认证，就放行
			如果当前用户没有认证，跳转到登录页面
			anon:代表shiro框架提供的一个过滤器，允许匿名访问
		-->
		<property name="filterChainDefinitions">
			<value>
				/css/* = anon
				/data/* = anon
				/demo/* = anon
				/images/* = anon
				/js/** = anon
				/validatecode.jsp* = anon
				/userAction_login.action = anon
				/** = authc
			</value>
		</property>
	</bean>
	
	<!-- 注册缓存管理器  -->
	<bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
		<property name="cacheManagerConfigFile" value="classpath:ehcache.xml" />
	</bean>
	
	<!-- 将缓存管理器注入安全管理器 -->
	<!-- 注册安全管理器 -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<!-- 注册realm -->
		<property name="realm" ref="bosRealm" />
		<!-- 注入缓存管理器 -->
		<property name="cacheManager" ref="cacheManager" />
	</bean>
	
	<!--
		#########################################################
		shiro框架使用注解进行权限控制
		#########################################################
	-->
	<!-- 基于spring自动代理方式为Service类创建代理方式,实现权限控制 -->
	<bean
		class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator">
		<!-- 强制使用cglib方式创建代理对象 -->
		<property name="proxyTargetClass" value="true"></property>
	</bean>
	<!-- 配置切面 -->
	<bean
		class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
		<property name="securityManager" ref="securityManager"></property>
	</bean>
	
	<!--
		#########################################################
		使用quartz指定自动发送邮件的任务调度
		#########################################################
	-->
	
	<!-- 指定自定义任务对象 -->
	<bean id="mailJob" class="com.chenzhou.bos.jobs.mailjob.MailJob"></bean>
	<!-- 指定jobdetail,通过反射调用自定义任务对象 -->
	<bean id="jobDetail"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<!-- 注入要调用的任务对象 -->
		<property name="targetObject" ref="mailJob" />
		<!-- 指定要调用的方法 -->
		<property name="targetMethod" value="sendMail" />
	</bean>
	<!-- 指定触发器 -->
	<bean id="trigger"
		class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<!-- 注入jobdetail -->
		<property name="jobDetail" ref="jobDetail" />
		<!-- 指定调度规则 -->
		<property name="cronExpression">
			<!-- 0/5 * * * * ? -->
			<value>0/5 * * * * ? 2099</value>
		</property>
	</bean>
	<!-- 指定调度工厂 -->
	<bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<!-- 注入触发器 -->
		<property name="triggers">
			<array>
				<ref bean="trigger" />
			</array>
		</property>
	</bean>
	
</beans>









